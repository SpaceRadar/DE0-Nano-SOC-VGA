// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/23/2015 12:16:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    vgaram
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module vgaram_vlg_sample_tst(
	clk50_in,
	sampler_tx
);
input  clk50_in;
output sampler_tx;

reg sample;
time current_time;
always @(clk50_in)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module vgaram_vlg_check_tst (
	blue_out,
	clk25,
	green_out,
	hs_out,
	red_out,
	vs_out,
	sampler_rx
);
input [2:0] blue_out;
input  clk25;
input [1:0] green_out;
input  hs_out;
input [2:0] red_out;
input  vs_out;
input sampler_rx;

reg [2:0] blue_out_expected;
reg  clk25_expected;
reg [1:0] green_out_expected;
reg  hs_out_expected;
reg [2:0] red_out_expected;
reg  vs_out_expected;

reg [2:0] blue_out_prev;
reg  clk25_prev;
reg [1:0] green_out_prev;
reg  hs_out_prev;
reg [2:0] red_out_prev;
reg  vs_out_prev;

reg  clk25_expected_prev;
reg  hs_out_expected_prev;
reg  vs_out_expected_prev;

reg  last_clk25_exp;
reg  last_hs_out_exp;
reg  last_vs_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	blue_out_prev = blue_out;
	clk25_prev = clk25;
	green_out_prev = green_out;
	hs_out_prev = hs_out;
	red_out_prev = red_out;
	vs_out_prev = vs_out;
end

// update expected /o prevs

always @(trigger)
begin
	clk25_expected_prev = clk25_expected;
	hs_out_expected_prev = hs_out_expected;
	vs_out_expected_prev = vs_out_expected;
end



// expected clk25
initial
begin
	clk25_expected = 1'bX;
end 

// expected hs_out
initial
begin
	hs_out_expected = 1'bX;
end 

// expected vs_out
initial
begin
	vs_out_expected = 1'bX;
end 
// generate trigger
always @(blue_out_expected or blue_out or clk25_expected or clk25 or green_out_expected or green_out or hs_out_expected or hs_out or red_out_expected or red_out or vs_out_expected or vs_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected blue_out = %b | expected clk25 = %b | expected green_out = %b | expected hs_out = %b | expected red_out = %b | expected vs_out = %b | ",blue_out_expected_prev,clk25_expected_prev,green_out_expected_prev,hs_out_expected_prev,red_out_expected_prev,vs_out_expected_prev);
	$display("| real blue_out = %b | real clk25 = %b | real green_out = %b | real hs_out = %b | real red_out = %b | real vs_out = %b | ",blue_out_prev,clk25_prev,green_out_prev,hs_out_prev,red_out_prev,vs_out_prev);
`endif
	if (
		( clk25_expected_prev !== 1'bx ) && ( clk25_prev !== clk25_expected_prev )
		&& ((clk25_expected_prev !== last_clk25_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clk25 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clk25_expected_prev);
		$display ("     Real value = %b", clk25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_clk25_exp = clk25_expected_prev;
	end
	if (
		( hs_out_expected_prev !== 1'bx ) && ( hs_out_prev !== hs_out_expected_prev )
		&& ((hs_out_expected_prev !== last_hs_out_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hs_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hs_out_expected_prev);
		$display ("     Real value = %b", hs_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hs_out_exp = hs_out_expected_prev;
	end
	if (
		( vs_out_expected_prev !== 1'bx ) && ( vs_out_prev !== vs_out_expected_prev )
		&& ((vs_out_expected_prev !== last_vs_out_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vs_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vs_out_expected_prev);
		$display ("     Real value = %b", vs_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_vs_out_exp = vs_out_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module vgaram_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk50_in;
// wires                                               
wire [2:0] blue_out;
wire clk25;
wire [1:0] green_out;
wire hs_out;
wire [2:0] red_out;
wire vs_out;

wire sampler;                             

// assign statements (if any)                          
vgaram i1 (
// port map - connection between master ports and signals/registers   
	.blue_out(blue_out),
	.clk25(clk25),
	.clk50_in(clk50_in),
	.green_out(green_out),
	.hs_out(hs_out),
	.red_out(red_out),
	.vs_out(vs_out)
);

// clk50_in
always
begin
	clk50_in = 1'b0;
	clk50_in = #10000 1'b1;
	#10000;
end 

vgaram_vlg_sample_tst tb_sample (
	.clk50_in(clk50_in),
	.sampler_tx(sampler)
);

vgaram_vlg_check_tst tb_out(
	.blue_out(blue_out),
	.clk25(clk25),
	.green_out(green_out),
	.hs_out(hs_out),
	.red_out(red_out),
	.vs_out(vs_out),
	.sampler_rx(sampler)
);
endmodule

